#!/usr/bin/perl

#######################################################################
#
# argonaut-client-management
#
# Copyright (C) 2011 FusionDirectory project <contact@fusiondirectory.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
#######################################################################
 
use strict;
use warnings;

use 5.008;

use JSON::RPC::Server::Daemon;
use Config::IniFiles;
use Log::Handler;
use File::Pid;
use App::Daemon qw(detach);

use Argonaut::Common qw(:file);

my ($client_port,$logdir);
my $configfile = "/etc/argonaut/argonaut.conf";
my $logfile = "argonaut-client-management.log";
my $piddir = "/var/run/argonaut";
my $pidfile = "argonaut-client-management.pid";

$SIG{TERM}=\&sig_int_handler;

$SIG{INT}=\&sig_int_handler;

readConfig();

argonaut_create_dir($logdir);

my $log = Log::Handler->create_logger("argonaut-client-management");
    
$log->add(
    file => {
        filename => "$logdir/$logfile",
        maxlevel => "debug",
        minlevel => "emergency",
        newline  => 1,
    }
);

detach();

argonaut_create_dir($piddir);

my $pid = File::Pid->new({
    file => "$piddir/$pidfile",
  });

my $pidrunning = $pid->running;

if ($pidrunning) {
  die "Argonaut Management is already running $pidrunning\n";
}

$pid->write;

=pod
This just launch a JSONRPC server with ClientDaemon.pm methods.
=cut
my $server = JSON::RPC::Server::Daemon->new(LocalPort => $client_port);

$log->notice("argonaut-client-management started");

$server->version(0);
$server->return_die_message(1);
$server->dispatch_to('Argonaut::ClientDaemon')->handle();

=pod
=item readConfig
Read from the config file argonaut.conf all the informations
No parameters needed
=cut
sub readConfig {
    my $config = Config::IniFiles->new( -file => $configfile, -allowempty => 1, -nocase => 1);

    $client_port            =   $config->val( network => "client_port"          ,8081);
    $logdir                 =   $config->val( log => "logdir"                   ,"/var/log/argonaut/");
}

=pod

=item sig_int_handler
Get the sigint signals, remove the pid and exit
=cut

sub sig_int_handler {

    $pid->remove;
    exit(0);
}


__END__

# vim:ts=2:sw=2:expandtab:shiftwidth=2:syntax:paste
