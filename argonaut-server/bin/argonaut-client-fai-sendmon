#!/usr/bin/perl
##########################################################################
#  This code is part of FusionDirectory (http://www.fusiondirectory.org/)
#  Copyright (C) 2011  FusionDirectory
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#############################################################################

use strict;
use warnings;
use 5.010;

use JSON::RPC::Client;
use Config::IniFiles;
  
my $configfile = "/etc/argonaut/argonaut.conf";
  
my $config = Config::IniFiles->new( -file => $configfile, -allowempty => 1, -nocase => 1);

my $server_port                     =   $config->val( network => "server_port"        ,8080);
my $server_ip                       =   $config->val( network => "server_ip"          ,"");

my $file                            =   $config->val( client => "file"                ,"/tmp/argonaut");

my $taskid;

=pod
This program is supposed to read on stdin the sendmon fai output, extract useful information and send them to argonaut-server.
It has never been tested.
=cut

open (ID, "<$file") or die "cannot open $file";
    $taskid = <ID>;
close(ID);

while (my $var = <STDIN>) {
    $var =~ /(\w+) (.*)/;
    if($1 eq "TASKBEGIN") {
        say "task $2 begun";
        
        my $client = new JSON::RPC::Client;
        $client->version('1.0');

        $client->prepare("http://".$server_ip.":".$server_port, ['set_task_substatus']);
        my $res = $client->set_task_substatus($taskid,$2,50);

        if($res) {
          if ($res->is_error) {
              die "Error : ", $res->error_message;
          }
          else {
              print "Result : ".$res->result."\n";
              return $res->result;
          }
        }
        else {
          die "Status : ".$client->status_line;
        }
    } elsif($1 eq "TASKERROR") {
        #do something
        
        my $client = new JSON::RPC::Client;
        $client->version('1.0');

        $client->prepare("http://".$server_ip.":".$server_port, ['set_error']);
        my $res = $client->set_error($taskid,$2);

        if($res) {
          if ($res->is_error) {
              die "Error : ", $res->error_message;
          }
          else {
              print "Result : ".$res->result."\n";
              return $res->result;
          }
        }
        else {
          die "Status : ".$client->status_line;
        }
    }
}
