#!/usr/bin/perl
##########################################################################
#  This code is part of FusionDirectory (http://www.fusiondirectory.org/)
#  Copyright (C) 2011  FusionDirectory
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#############################################################################

use strict;
use warnings;
use 5.010;

use JSON::RPC::Client;
use Config::IniFiles;
  
my $configfile = "/etc/argonaut/argonaut.conf";
  
my $config = Config::IniFiles->new( -file => $configfile, -allowempty => 1, -nocase => 1);

my $server_port                     =   $config->val( network => "server_port"        ,8080);
my $server_ip                       =   $config->val( network => "server_ip"          ,"");

my $file                            =   $config->val( client => "file"                ,"/tmp/argonaut");

my $taskid;

my %progress_value = (
    "confdir"   =>  0,
    "setup"     =>  1,
    "defclass"  =>  1,
    "defvar"    =>  1,
    "action"    =>  1,
    "install"   =>  2,
    "partition" =>  2,
    "extrbase"  =>  3,
    "debconf"   =>  15,
    "prepareapt"=>  15,
    "updatebase"=>  15,
    "instsoft"  =>  16,
    "configure" =>  80,
    "savelog"   =>  90
);

=pod
This program is supposed to read on stdin the sendmon fai output, extract useful information and send them to argonaut-server.
It has never been tested.
=cut

open (ID, "<$file") or die "cannot open $file";
    $taskid = <ID>;
close(ID);
chomp($taskid);

while (my $var = <STDIN>) {
    $var =~ /(\w+) (\S+)\s?(\S*)/;
    my $keyword = $1;
    my $taskname = $2;
    my $errorcode = $3;
    if($keyword eq "TASKBEGIN") {
        say "[sendmon] Task $taskname begun";
        
        my $progress = undef;
        if(defined $progress_value{$taskname}) {
            $progress = $progress_value{$taskname};
        }
        
        my $client = new JSON::RPC::Client;
        $client->version('1.0');

        my $callobj = {
          method  => "set_task_substatus",
          params  => [$taskid,$taskname,$progress],
        };

        my $res = $client->call("http://".$server_ip.":".$server_port, $callobj);

        if($res) {
            if ($res->is_error) {
                die "Error : ", $res->error_message;
            }
        } else {
            die "Error while trying to contact Argonaut server : ".$client->status_line;
        }
    } elsif($keyword eq "TASKEND") {
        say "[sendmon] Task $taskname ended";
        
        if($taskname eq "faiend") {
            my $client = new JSON::RPC::Client;
            $client->version('1.0');

            my $callobj = {
              method  => "set_task_substatus",
              params  => [$taskid,$taskname,100],
            };

            my $res = $client->call("http://".$server_ip.":".$server_port, $callobj);

            if($res) {
                if ($res->is_error) {
                    die "Error : ", $res->error_message;
                }
            } else {
                die "Error while trying to contact Argonaut server : ".$client->status_line;
            }
        }
    } elsif($keyword eq "TASKERROR") {
        say "[sendmon] Task error $taskname $errorcode";
        
        my $client = new JSON::RPC::Client;
        $client->version('1.0');

        my $callobj = {
          method  => "set_error",
          params  => [$taskid,$taskname." ".$errorcode],
        };
        
        my $res = $client->call("http://".$server_ip.":".$server_port, $callobj);

        if($res) {
          if ($res->is_error) {
              die "Error : ", $res->error_message;
          }
        }
        else {
          die "Status : ".$client->status_line;
        }
    }
}
