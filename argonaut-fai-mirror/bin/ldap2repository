#!/usr/bin/perl

#######################################################################
#
# ldap2repository
#
# Copyright (c) 2005,2006 Jan-Marek Glogowski <glogow@fbihome.de>
# Copyrignt (c) 2007,2009 The GOsa project <gosa-devel@oss.gonicus.de>
# Copyright (C) 2011 FusionDirectory project
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
#######################################################################

use strict;
use warnings;

use 5.008;

use Switch;
use Net::LDAP;
use MIME::Base64;
use Getopt::Std;
use File::Path;
use File::Copy;
use Log::Handler;
use Config::IniFiles;

use Argonaut::Common qw(:ldap :file :array :net);

use lib "/usr/lib/argonaut";

my ($ldap_configfile,$ldap_dn,$ldap_password,$interface,$arch,$mirrordir,$proxy);
my ($cleanup,$verbose,$errors,$source,$gpgcheck,$contents,$pdiff,$hostname);
my ($iptool,$logdir);
my $result;
my $mac;
my $ldapinfos;

my $configfile = "/etc/argonaut/argonaut.conf";
my $outdir = "/etc/argonaut/fai";
my $crond_dir= "/etc/cron.d";
my $logfile = "ldap2repository.log";

readConfig($configfile);

argonaut_create_dir($logdir);

my $log = Log::Handler->create_logger("ldap2repository");

$log->add(
    file => {
        filename => "$logdir/$logfile",
        maxlevel => "debug",
        minlevel => "emergency",
        newline  => 1,
    }
);

$log->info ("ldap2repository started\n");

$ldapinfos = argonaut_ldap_init($ldap_configfile, 0, $ldap_dn, 0, $ldap_password);

if ( $ldapinfos->{'ERROR'} > 0) {
  print ( $ldapinfos->{'ERRORMSG'}."\n" );
  exit ($ldapinfos->{'ERROR'});
}

my $base = $ldapinfos->{'BASE'};

my $ldapuris = $ldapinfos->{'URIS'};

my $handle = $ldapinfos->{'HANDLE'};

# find mac address of the host running ldap2repository
$mac = argonaut_get_mac($interface);

argonaut_create_dir($outdir);

  if( $verbose eq "yes" ) {
    my $host = $hostname -f;
    print "Generating sources.list and debmirror cronjob for server\n"
      . "Host:   ${host}\n"
      . "Base:   ${base}\n"
      . "Outdir: ${outdir}\n\n";
  }
  
#generate the cronjob script
generate_cronjob_script();

#generate the cronjob daily
generate_cronjob_daily();

# take down ldap session
$handle->unbind;
$handle->disconnect;

exit 0;

sub readConfig {
  my $config = Config::IniFiles->new( -file => $configfile, -allowempty => 1, -nocase => 1);

  $interface              =   $config->val( ldap2repository => "interface"    ,"eth0");
  $arch                   =   $config->val( ldap2repository => "arch"         ,"i386");
  $mirrordir              =   $config->val( ldap2repository => "mirrordir"    ,"/srv/www/");
  $proxy                  =   $config->val( ldap2repository => "proxy"        ,"");
  $cleanup                =   $config->val( ldap2repository => "cleanup"      ,"no");
  $errors                 =   $config->val( ldap2repository => "errors"       ,"yes");
  $source                 =   $config->val( ldap2repository => "source"       ,"no");
  $gpgcheck               =   $config->val( ldap2repository => "gpgcheck"     ,"no");
  $contents               =   $config->val( ldap2repository => "contents"     ,"no");
  $verbose                =   $config->val( ldap2repository => "verbose"      ,"no");
  $hostname               =   $config->val( programs => "hostname"            ,"/bin/hostname");
  $logdir                 =   $config->val( log => "logdir"                   ,"/var/log/argonaut/");

  if ($cleanup eq "no") {
    $cleanup = "--nocleanup";
  } else {
    $cleanup = "";
  }
    
  if ($errors eq "yes") {
    $errors = "--ignore-small-errors";
  } else {
    $errors = "";
  }
    
  if ($source eq "no") {
    $source = "--nosource";
  } else {
    $source = "";
  }

  if ($gpgcheck eq "no") {
    $gpgcheck = "--ignore-release-gpg";
  } else {
    $gpgcheck = "";
  }

  if ($contents eq "yes") {
    $contents = "--getcontents";
  } else {
    $contents = "";
  }
}

sub generate_cronjob_daily {
  # generate new /etc/cron.d/argonaut-mirror
  open (CROND, ">${crond_dir}/argonaut-mirror")
    || die "Can't create ${crond_dir}/argonaut-mirror: $!\n";

  print CROND "PATH=/sbin:/bin:/usr/sbin:/usr/bin\n\n";
  print CROND "\@daily root $outdir/mirror-update-cronjob\n";
  close (CROND);
}
  
sub generate_cronjob_script {
  my ($mesg,$entry,$par_mesg,$par_entry,@entries);
  my ($line,@deblines,@modsections,@rdns,%saw,$debline);
  
  open (CRON, ">${outdir}/mirror-update-cronjob")
    || die "Can't create ${outdir}/mirror-update-cronjob: $!\n";
    
  my $reposerver = argonaut_search_repo_server($handle, $base, $mac);
  if (0 == $reposerver->count) {
    print( "Server $hostname doesn't contain software repositories\n" );
    $log->info ("Server $hostname doesn't contain software repositories\n");
    close (CRON);
    unlink "${outdir}/mirror-update-cronjob";
    exit 0;
  }

  # Write cron script
  print CRON "#!/bin/sh\n";
  
  @entries = $reposerver->entries;

  $entry = $entries[0];
  my ($newbase) = $entry->dn() =~ m/.*ou=systems,(.*)/;
  if ("$base" ne "$newbase") {
    print ("Switching base: $newbase\n") if($verbose eq "yes");
    $log->info ("Switching base: $newbase\n");
    $base = $newbase;
  }
  
  foreach my $repoline ($entry->get_value('FAIrepository')){
    my (@items) = split('\|',${repoline});
    my $uri = $items[0];
    my ($dir) = $uri =~ m%.*://[^/]+/(.*)%;
    my ($localuri) = $uri;
    my $parent_or_opts = $items[1];
    my $dist = $items[2];
    my $sections = $items[3];
    my (@section_list) = split(',',$items[3]);

    open (SOURCES, ">${outdir}/sources.list");
    print SOURCES "deb $uri $dist @section_list\n";
    print " +S  $dist ($sections) via $uri\n" if( $verbose eq "yes" );
  
    if ("" eq "$parent_or_opts") {
      print( "No parent for '$repoline'\n" );
      $log->info ("No parent for '$repoline'\n");
      next;
    }

    # Check repository release
    my (@rdns);

    @rdns = split(',',$base);

    $par_entry = argonaut_search_parent_repo_server( $handle, $base, "${parent_or_opts}" );
    if (0 == $par_entry) {
      print( "Couldn't find parent repository server for '$repoline'\n" );
      $log->info ("Couldn't find parent repository server for '$repoline'\n");
      next;
    }

    foreach my $par_repoline ($par_entry->get_value('FAIrepository')){
      my (@par_items) = split('\|',${par_repoline});
      my ($method,$host,$root);
      if ($par_items[0] =~ m#([^:]+)://([^/]+)(.*)#) {
        $method = $1;
        $host = $2;
        $root = $3;
      }

      my $par_dist = $par_items[2];
      my @outline = ();
      if ("$dist" eq "$par_dist") {
        my (@par_section_list) = split(',', $items[3]);
        foreach my $section (@par_section_list) {
          if (argonaut_array_find_and_remove( \@section_list, ${section})) {
            push (@outline, $section);
            last if (0 == scalar @section_list);
          }
        }

        if (0 != scalar @{outline}) {
          print CRON "\ndebmirror ${cleanup} ${gpgcheck} ${source} ${errors} ${contents} -a ${arch} --dist=${dist} --section=" . join(",", @{outline}) 
                    . " --method=${method} --host=${host} --root=${root} ${proxy} ${mirrordir}/${dir}\n";
          print " +Cs ${dist} (" . join(",", @{outline}) . ") from ${host}\n" if( $verbose eq "yes" );
        }
        last if (0 == scalar @section_list);
      }
    }
  }
  close (CRON);
}

__END__

=head1 NAME

ldap2repository - creating debian repositories cronjob for the Argonaut deployment system.

=head1 SYNOPSIS

ldap2repository 

=head1 DESCRIPTION

ldap2repository is a script to create the cronjob for the local debian repositories used by the argonaut deployement system.

The configuration is read from the argonaut.conf file

=head1 BUGS 

Please report any bugs, or post any suggestions, to the fusiondirectory mailing list fusiondirectory-users or to
<https://forge.fusiondirectory.org/projects/argonaut-agents/issues/new>

=head1 LICENCE AND COPYRIGHT

This code is part of FusionDirectory <http://www.fusiondirectory.org>

=over 3

=item Copyright (C) 2005-2006 Jan-Marek Glogowski

=item Copyright (C) 2007-2010 The GOsa project

=item Copyright (C) 2011 FusionDirectory project

=back

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

=cut

# vim:ts=2:sw=2:expandtab:shiftwidth=2:syntax:paste
